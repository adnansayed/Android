package com.pss.project;

import java.util.ArrayList;

import android.R.string;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class Dbadapter {

	private static final String TOTAL = "total";
	private static final String PR_KG = "pr_kg";
	private static final String KG = "kg";
	private static final String PIECE = "piece";
	private static final String _ID = "_id";
	private static final String PURCHASE = "purchase";
	private static final String PDATE = "pdate";
	private static final String TAG = "Dbadapter";
	private static final String DATABASE_NAME ="WAYIN";
	private static final int DATABASE_VERSION = 1;
	
	private static final String DATABASE_CREATE =
	"CREATE TABLE IF NOT EXISTS "+PURCHASE+" ("+_ID+" integer primary key autoincrement, "
	+ ""+PDATE+" date not null,"+PIECE+" interger not null,"+KG+" VARCHAR not null,"+PR_KG+" VARCHAR not null,"+TOTAL+" VARCHAR not null);";
	
	
	private final Context context;
	private DatabaseHelper DBHelper;
	private SQLiteDatabase db;
	
	public Dbadapter(Context ctx)
	{
	this.context = ctx;
	DBHelper = new DatabaseHelper(context);
	}
	
	private static class DatabaseHelper extends SQLiteOpenHelper
	{
	DatabaseHelper(Context context)
	{
	super(context, DATABASE_NAME, null, DATABASE_VERSION);
	}
	@Override
	public void onCreate(SQLiteDatabase db)
	{
	try {
		Log.d("test", "attempting to create db");
	db.execSQL(DATABASE_CREATE);
	} catch (SQLException e) {
	e.printStackTrace();
	}
	}
	
	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)
	{
	Log.w(TAG, "Upgrading database from version " + oldVersion + "to "
	+ newVersion + ",which will destroy all old data");
	db.execSQL("DROP TABLE IF EXISTS purchase");
	onCreate(db);
	}
	}
	
	//---opens the database---
	public Dbadapter open() throws SQLException
	{
	db = DBHelper.getWritableDatabase();
	return this;
	}
	
	
	//---closes the database---
	public void close()
	{
	DBHelper.close();
	}
	
	//---insert a contact into the database---
	public long insertPurchase(ArrayList<Purchase> allpurchase )
	{
	Log.d("test", "insert entered");
	for (Purchase purchases : allpurchase) {
		ContentValues iv = new ContentValues();
		iv
	
		
		
	}
	
	/*initialValues.put(PDATE,pdate);
	initialValues.put(PIECE, piece);
	initialValues.put(KG,kg);
	initialValues.put(PR_KG,pr_kg);
	initialValues.put(TOTAL,total);
	Log.d("test", "values taken");
	return db.insert(PURCHASE, null, initialValues);*/
	}
	
	//---deletes a particular contact---
	public boolean deletePurchase(long rowId)
	{
	return db.delete(PURCHASE, _ID + "=" + rowId, null) > 0;
	}
	
	//---retrieves all the contacts---
	public Cursor getAllPurchase()
	{
	return db.query(PURCHASE, new String[] {_ID, PDATE,
	PIECE,KG,PR_KG,TOTAL}, null, null, null, null, null);
	}
	
	//---retrieves a particular contact---
	public Cursor getPurchase(long rowId) throws SQLException
	{
	Cursor mCursor =
	db.query(true, PURCHASE, new String[] {_ID,
	PDATE, PIECE,KG,PR_KG,TOTAL}, _ID + "=" + rowId, null,
	null, null, null, null);
	if (mCursor != null) {
	mCursor.moveToFirst();
	}
	return mCursor;
	}
	
	//---updates a contact---
	public boolean updatePurchase(long rowId, String pdate, String piece,String kg,String pr_kg,String total)
	{
		ContentValues args = new ContentValues();
		args.put(PDATE,pdate);
		args.put(PIECE, piece);
		args.put(KG,kg);
		args.put(PR_KG,pr_kg);
		args.put(TOTAL,total);
		return db.update(PURCHASE, args, _ID + "=" + rowId, null) > 0;
		}
}
